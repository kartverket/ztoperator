# RequestAuthentication
apiVersion: security.istio.io/v1
kind: RequestAuthentication
metadata:
  name: auth-policy
spec:
  jwtRules:
    - audiences:
        - entraid_server
      forwardOriginalToken: true
      issuer: http://mock-oauth2.auth:8080/entraid
      jwksUri: http://mock-oauth2.auth:8080/entraid/jwks
  selector:
    matchLabels:
      app: application
---
# AuthorizationPolicy (require-auth)
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: auth-policy-require-auth
spec:
  rules:
    - to:
        - operation:
            paths:
              - '*'
      when:
        - key: request.auth.claims[iss]
          values:
            - http://mock-oauth2.auth:8080/entraid
        - key: request.auth.claims[aud]
          values:
            - entraid_server
  selector:
    matchLabels:
      app: application
---
# EnvoyFilter (auto-login)
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: auth-policy-login
spec:
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.lua
          typed_config:
            '@type': type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            default_source_code:
              inline_string: "\nlocal ignore_rules = {}\nlocal require_rules = {{regex=\"^/oauth2/callback$\",methods={}},{regex=\"^/logout$\",methods={}},{regex=\"^/login$\",methods={}}}\nlocal deny_redirect_rules = {}\nlocal authorize_endpoint = \"http://mock-oauth2.auth:8080/entraid/authorize\"\nlocal login_params = {[\"acr_values\"]=\"entraid\",[\"authorization_details\"]=\"%5B+%7B+%22type%22%3A+%22ansattporten%3Aaltinn%3Aservice%22%2C+%22resource%22%3A+%22urn%3Aaltinn%3Aresource%3A2480%3A40%22+%7D%2C+%7B+%22type%22%3A+%22ansattporten%3Aaltinn%3Aservice%22%2C+%22resource%22%3A+%22urn%3Aaltinn%3Aresource%3A5900%3A1%22%2C+%22allow_multiple_organizations%22%3A+true+%7D+%5D\"}\n\n-- returns true when {p,m} matches any rule in the supplied table\nlocal function match(rules, p, m)\n  for _, rule in ipairs(rules) do\n    if string.match(p, rule.regex) then\n      -- empty \"methods\" table == all methods\n      if next(rule.methods) == nil or rule.methods[m] then\n        return true\n      end\n    end\n  end\n  return false\nend\n\n-- returns true if {p,m} is in ignore_rules *and* NOT in require_rules\nlocal function should_bypass(p, m)\n  local bypass = false\n  if p ~= \"\" and m ~= \"\" then\n    -- bypass only when it is in ignore_rules *and* NOT in require_rules\n    if match(ignore_rules, p, m) and not match(require_rules, p, m) then\n      bypass = true\n    end\n  end\n  return bypass\nend\n\n-- returns true if {p,m} is in deny_redirect_rules\nlocal function should_deny_redirect(p, m)\n  local deny_redirect = false\n  if p ~= \"\" and m ~= \"\" then\n    -- deny redirect only when it is in deny_redirect_rules\n    if match(deny_redirect_rules, p, m) then\n      deny_redirect = true\n    end\n  end\n  return deny_redirect\nend\n\nlocal function is_empty_table(t)\n  return type(t) ~= \"table\" or next(t) == nil\nend\n\nfunction envoy_on_request(request_handle)\n  local p = request_handle:headers():get(\":path\")   or \"\"\n  local m = request_handle:headers():get(\":method\") or \"\"\n  \n  local bypass = should_bypass(p, m)\n  request_handle:logCritical(\"Login bypassed?: \" .. tostring(bypass))\n  request_handle:headers():add(\"x-bypass-login\", tostring(bypass))\n  \n  local deny_redirect = should_deny_redirect(p, m)\n  request_handle:logCritical(\"Deny redirect?: \" .. tostring(deny_redirect))\t\n  request_handle:headers():add(\"x-deny-redirect\", tostring(deny_redirect))\nend\n\nfunction envoy_on_response(response_handle)\n  local status = response_handle:headers():get(\":status\") or \"\"\n  if status == \"302\" and not is_empty_table(login_params) then\n    local loc = response_handle:headers():get(\"location\") or \"\"\n    if loc ~= \"\" then\n      if string.sub(loc, 1, #authorize_endpoint) == authorize_endpoint then\n\t\tlocal base, qs = loc:match(\"^([^?]+)%??(.*)$\")\n\t\tlocal filtered = {}\n\t\tif qs ~= \"\" then\n\t\t    local params = {}\n\t\t\tfor key, val in string.gmatch(qs, \"([^&=?]+)=([^&=?]+)\") do\n\t\t\t  params[key] = val\n\t\t\tend\n\t\t\tfor k, v in pairs(login_params) do\n\t\t\t  params[k] = v\n\t\t  \tend\n\t\t\tfor k, v in pairs(params) do\n\t\t\t  table.insert(filtered, k .. \"=\" .. v)\n\t\t\tend\n\t\tend\n\t\t\n\t\tlocal new_qs = table.concat(filtered, \"&\")\n\t\tlocal new_url = base .. (new_qs ~= \"\" and (\"?\" .. new_qs) or \"\")\n\t\tresponse_handle:headers():replace(\"location\", new_url)\n\t  end\t\n    end\n  end\nend\n"
    - applyTo: CLUSTER
      match:
        cluster:
          service: oauth
      patch:
        operation: ADD
        value:
          connect_timeout: 10s
          dns_lookup_family: V4_ONLY
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: oauth
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: mock-oauth2.auth
                          port_value: 8080
          name: oauth
          type: LOGICAL_DNS
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: envoy.filters.http.jwt_authn
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.oauth2
          typed_config:
            '@type': type.googleapis.com/envoy.extensions.filters.http.oauth2.v3.OAuth2
            config:
              auth_scopes:
                - openid
              authorization_endpoint: http://mock-oauth2.auth:8080/entraid/authorize
              credentials:
                client_id: entraid_server
                hmac_secret:
                  name: hmac
                  sds_config:
                    path_config_source:
                      path: /etc/istio/config/hmac-secret.yaml
                      watched_directory:
                        path: /etc/istio/config
                token_secret:
                  name: token
                  sds_config:
                    path_config_source:
                      path: /etc/istio/config/token-secret.yaml
                      watched_directory:
                        path: /etc/istio/config
              deny_redirect_matcher:
                - name: x-deny-redirect
                  string_match:
                    exact: "true"
              end_session_endpoint: http://mock-oauth2.auth:8080/entraid/endsession
              forward_bearer_token: true
              pass_through_matcher:
                - name: authorization
                  string_match:
                    prefix: 'Bearer '
                - name: x-bypass-login
                  string_match:
                    exact: "true"
              redirect_path_matcher:
                path:
                  exact: /oauth2/callback
              redirect_uri: https://%REQ(:authority)%/oauth2/callback
              retry_policy: {}
              signout_path:
                path:
                  exact: /logout
              token_endpoint:
                cluster: oauth
                timeout: 5s
                uri: http://mock-oauth2.auth:8080/entraid/token
              use_refresh_token: true
  workloadSelector:
    labels:
      app: application
---

